apply plugin: "jacoco"

jacoco {
    toolVersion = "0.7.4+"
}

// Creates tasks based on the application build variant (productFlavor + buildType = variant)
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def autoGenerated = ['**/R.class',
                         '**/R$*.class',
                         '**/AutoValue_*.*', // AutoValue extensions
                         '**/*_MembersInjector.class', //Dagger2 generated code
                         '*/*_MembersInjector*.*', //Dagger2 generated code
                         '**/*_*Factory*.*', //Dagger2 generated code
                         '*/*Component*.*', //Dagger2 generated code
                         '**/*Module*.*', //Dagger2 generated code
                         '**/Dagger*.*',
                         '**/Manifest*.*',
                         'android/**/*.*',
                         '**/BuildConfig.*',
                         '**/*$ViewBinder*.*',
                         '**/*$ViewInjector*.*',
                         'io/**/*.*',
                         '**/Lambda$*.class',
                         '**/Lambda.class',
                         '**/*Lambda.class',
                         '**/**Model_.class',
                         '**/*Lambda*.class']


    /**
     * Generates Jacoco coverage reports based off the unit tests.
     */
    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group "Reporting"
        description "Generate ${variantName} Jacoco coverage reports."

        reports {
            xml.enabled = true
            html.enabled = true
        }

        // variant.javaCompile.source does not work
        // traverses from starting point
        sourceDirectories = files(android.sourceSets.main.java.srcDirs)
        classDirectories = fileTree(dir: variant.javaCompiler.destinationDir, excludes: autoGenerated)
        executionData = fileTree(dir: project.projectDir, includes:
                  ['**/*.exec', '**/*.ec'])
    }
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
